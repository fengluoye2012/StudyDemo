线程的状态：
1. 初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。
2. 运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的成为“运行”。
    线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，
    等待被线程调度选中，获取cpu 的使用权，此时处于就绪状态（ready）。
    就绪状态的线程在获得cpu 时间片后变为运行中状态（running）。
3.阻塞(BLOCKED)：表示线程阻塞于锁。
4.等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。
5.超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间内自行返回。
6. 终止(TERMINATED)：表示该线程已经执行完毕。
https://blog.csdn.net/pange1991/article/details/53860651/

线程安全的主要方式：
1：synchronized关键字；2:ReentrantLock；3：ThreadLocal类；

一：synchronized:锁，用于线程同步;
线程同步:1）同一个线程中，代码执行有先后顺序；2）多个线程中，通过锁的方式，强制让其他线程等待；
线程异步：多个线程环境下，线程执行具有随机性，和调用顺序没有明确的关系；
线程不安全：在多线程环境下，多个线程同时对一个对象实例进行操作；
原因：在对对象实例进行操作时，CUP 寄存器先把内存中的变量读取到寄存器中，在寄存器中进行（各种运算符）操作，
      最后把结果写入到内存中；eg:多个线程同时对一个对象操作时，A线程读取了数据之后，在寄存器中进行操作，
      此时CUP 切换到B，B线程有再次读取原来的内存值，进行操作，写入内存；两次操作只有一次是有意义的，就造成最后的结果和预期不一致；
解决办法：同时只有一个线程堆变量进行操作，在当前线程在操作结束前，其他线程阻塞；

synchronized用法：
1）修饰方法：对于加锁的方法，同时只有一个线程访问，其他线程可以访问其他非加锁方法；
    synchronized 是对象锁，意味着同一个锁，同时只能有一个线程访问；
1.1）非静态方法：给对象持锁；
1.2）静态方法：对当前Java文件对应的Class类进行持锁,可以对类的所有对象实例起作用;是锁的一种；不是意味着同一时间，只有一个线程访问该类；

2）代码块：加锁的部分，同时只能有一个线程访问，没有加锁部分，多个线程可以同时访问；
2.1）synchronized(this)：和1.1)完全一致，this就是一个锁，也是锁当前对象；
    也可以把this改为对象（不要用String，用new object()实例），这样的好处是，不同的锁，可以同时访问，不冲突（即不需要等待）；
    eg：同一个锁，在同一时间内，只能有一个线程访问；在当前线程释放锁后，CUP才会执行其他线程中的一个；
2.2）synchronized(class)：和1.2完全一致；

思考：1.1 和 1.2 有什么区别吗？
效果一样，是不同类型的锁而已；1.1是对象锁；1.2 是当前Java文件对应的类锁；
加锁的部分，同时只能有一个线程访问，没有加锁部分，多个线程可以同时访问；
同一个锁互斥，不同的锁之前不互斥；不同的锁，同一时间可以有各自的线程去持有；

二：ReentrantLock类
Lock类：lock()，unLock()分别表示对象前Condition对象加锁和释放锁；成对一一对应出现；lock()方法多，则造成无法解锁；
unLock()方法多，则报 IllegalMonitorStateException；

ReentrantLock的实现是基于其内部类FairSync（公平锁）和NonFairSync(非公平锁)实现的，其可重入性
是基于Thread.currentThread()来实现，如果当前线程已经获得了执行序列中的锁，那执行序列中的方法
都可以获得这个锁。

Lock锁分为公平锁和非公平锁两种，默认情况下，是非公平锁；
公平锁：公平锁和非公平锁的队列都是基于内部维护的一个双向链表(虚拟的)，表结点Node的值就是每一个请求当前所得线程
公平锁则在于每次都是一次从队首取值；
非公平锁：在等待过程中，如果有任意新的线程妄图获取锁，都是有很大的几率直接获取到锁；

2.2 synchronized 关键字和ReentrantLock的区别
synchronized：Java的关键字，在jvm层面上；执行完同步代码或者发生异常，自动释放锁；无法判断锁的状态；可重入，不可中断，非公平锁；
ReentrantLock：类，执行完之后，需要手动释放锁；可以判断锁的状态；可重入，可判断，可公平，也可不公平；

synchronized是托管给JVM执行的，而Lock是java写的控制锁的代码。在Java1.5中，synchronize是性能低效的。
因为这是一个重量级操作，需要调用操作接口，导致有可能加锁消耗的系统时间比加锁以外的操作还多。
相比之下使用Java提供的Lock对象，性能更高一些。但是到了Java1.6，发生了变化。
synchronize在语义上很清晰，可以进行很多优化，有适应自旋，锁消除，锁粗化，轻量级锁，偏向锁等等。
导致在Java1.6上synchronize的性能并不比Lock差。官方也表示，他们也更支持synchronize，在未来的版本中还有优化余地。

synchronized原始采用的是CPU悲观锁机制，即线程获得的是独占锁。独占锁意味着其他线程只能依靠阻塞来等待线程释放锁。
而在CPU转换线程阻塞时会引起线程上下文切换，当有很多线程竞争锁的时候，会引起CPU频繁的上下文切换导致效率很低。

而Lock用的是乐观锁方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，
直到成功为止。乐观锁实现的机制就是CAS操作（Compare and Swap）。我们可以进一步研究ReentrantLock的源代码，
会发现其中比较重要的获得锁的一个方法是compareAndSetState()。这里其实就是调用的CPU提供的特殊指令。

synchronized和ReentrantLock在一般情况下没有什么区别，但是在非常复杂的同步应用中，请考虑使用ReentrantLock;

三：ThreadLocal类：线程间独立，不同线程拥有自己的值，不同线程中的值是可以放入ThreadLocal类中进行保存的
，以空间换效率；